import { configDotenv } from "dotenv"
import { Bot, Keyboard, session } from "grammy"
import { getCardsMock, getTextMock } from "./helpers/functions.js"
import { keyboards } from "./helpers/keyboards.js"

configDotenv()

const bot = new Bot(process.env.API_TOKEN)

bot.use(session({ initial: () => ({}) }))

const cardsMock = getCardsMock()
const textMock = getTextMock()

//
//
// 

bot.command('start', async (ctx) => {
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –±–æ—Ç —Ç–∞—Ä–æ–ª–æ–≥', {
        reply_markup: keyboards.start
    })
})

bot.hears('–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥', async (ctx) => {
    await ctx.reply('–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å')
})

bot.hears('–ó–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç', async (ctx) => {
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä–∫–∞–Ω', {
        reply_markup: keyboards.cardValue
    })
})

bot.hears('–°—Ç–∞—Ä—à–∏–π', async (ctx) => {
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É', {
        reply_markup: keyboards.oldest
    })
})

bot.hears('–ú–ª–∞–¥—à–∏–π', async (ctx) => {
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç—å', {
        reply_markup: keyboards.yang
    })
})

bot.hears('–ñ–µ–∑–ª—ã', async (ctx) => {
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É', {
        reply_markup: keyboards.wands
    })
})

bot.hears('–î–∏—Å–∫–∏', async (ctx) => {
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É', {
        reply_markup: keyboards.disks
    })
})

bot.hears('–ö—É–±–∫–∏', async (ctx) => {
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É', {
        reply_markup: keyboards.cups
    })
})

bot.hears('–ú–µ—á–∏', async (ctx) => {
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É', {
        reply_markup: keyboards.swords
    })
})

cardsMock['oldest'].forEach(card => {
    let string = ''
    string += `<b>${card.name}</b>\n${card.value}\n\n`
    string += `<b>–°–≤–µ—Ç</b>\n${card.light}\n\n`
    string += `<b>–¢–µ–Ω—å</b>\n${card.dark}\n\n`
    string += `<b>–í —Ä–∞—Å–∫–ª–∞–¥–µ –Ω–∞ –¥–µ–ª–∞</b>\n${card.work}\n\n`
    string += `<b>–í —Ä–∞—Å–∫–ª–∞–¥–µ –Ω–∞ –ª—é–±–æ–≤—å</b>\n${card.love}\n\n`
    bot.hears(card.name, async (ctx) => {
        await ctx.reply(string, { parse_mode: "HTML" },)
    })
})

for (const key in cardsMock['yang']) {
    cardsMock['yang'][key].forEach(card => {
        let string = ''
        string += `<b>${card.name}</b>\n${card.shortValue}\n`
        string += `\n${card.value}\n\n`
        string += `<b>–í —Ä–∞—Å–∫–ª–∞–¥–µ –Ω–∞ –¥–µ–ª–∞</b>\n${card.work}\n\n`
        string += `<b>–í —Ä–∞—Å–∫–ª–∞–¥–µ –Ω–∞ –ª—é–±–æ–≤—å</b>\n${card.love}\n\n`
        bot.hears(card.name, async (ctx) => {
            await ctx.reply(string, { parse_mode: "HTML", reply_markup: keyboards.yang },)
        })
    })
}

bot.hears('üîô', async (ctx) => {
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –±–æ—Ç —Ç–∞—Ä–æ–ª–æ–≥', {
        reply_markup: keyboards.start
    })
})

bot.catch(err => {
    console.log(err)
})

bot.start() 